from typing import Optional, Union, Sequence


class Feature:
    """Advantages/disadvantages and quirks"""

    def __init__(
        self,
        name: str,
        description: str,
        cost: Union[int, Sequence[int]] = 0,
        level: Optional[int] = None
    ):
        self.name = name
        self.description = description
        self.cost = cost
        self.level = level

    @property
    def total_cost(self):
        return self.cost * (self.level or 1)

    def __str__(self):
        level = '' if self.level is None else f' - {self.level} уровень'

        return f'{self.name}{level} [{self.total_cost}]'

    def __hash__(self):
        return hash(self.name)


class Voice(Feature):

    def __init__(self):
        super().__init__(
            name='Голос (Voice)',
            description='У вас от природы чистый, красивый и привлекательный '
                        'голос. Вы получаете постоянный бонус +2 на все '
                        'следующие умения: Дипломатия (Diplomacy), '
                        'Бард (Bard), Политика (Politician), '
                        'Хорошие Манеры (Savoir-Faire), '
                        'Сексуальная Привлекательность (Sex Appeal), '
                        'Выступление (Performance) и Пение (Singing). '
                        'Вы также получаете +2 на реакцию всех, '
                        'кто может слышать ваш голос.',
            cost=10,
        )


class Charisma(Feature):

    def __init__(self, level: int):
        super().__init__(
            name='Харизма (Charisma)',
            description='Это природная способность производить впечатление и '
                        'вести за собой других. Любой может получить подобие '
                        'харизмы за счет привлекательности, хороших манер и '
                        'интеллигентности - но настоящая харизма работает '
                        'независимо от всех этих вещей и она или есть, или ее '
                        'нет. Влияет на броски реакции, совершаемые всеми '
                        'разумными существами. Цена: 5 очков за каждый бонус '
                        'реакции +1.',
            cost=5,
            level=level
        )


class Alertness(Feature):

    def __init__(self, level: int):
        super().__init__(
            name='Бдительность (Alertness)',
            description='Общий бонус на броски чувств или на случай, '
                        'когда мастер бросает проверку IQ с целью узнать, '
                        'обратили ли вы на что-нибудь внимание. '
                        'Это преимущество может быть скомбинировано с любым '
                        'видом обостренных чувств. Стоимость: 5 очков за '
                        'каждый +1 бросок.',
            cost=5,
            level=level
        )


class CommonSense(Feature):

    def __init__(self):
        super().__init__(
            name='Здравый смысл (Common Sense)',
            description='Каждый раз, когда вы делаете что-либо, что ГЛУПО '
                        'по мнению мастера, он бросает проверку вашего IQ. '
                        'Если бросок был для вас успешным, то он должен '
                        'предупредить вас: "Ты хорошо об этом подумал?". '
                        'Это преимущество позволяет импульсивному игроку '
                        'отыгрывать разумного персонажа.',
            cost=10
        )


class Magery(Feature):

    def __init__(self, level):
        super().__init__(
            name='Магические способности (Magical Aptitude (Magery))',
            description=(
                'У вас есть преимущество при изучении любого магического '
                'заклинания. Конечно, если вы из немагической культуры, '
                'никаких заклинаний у вас не будет, но вы все равно '
                'с легкостью сможете выучить их, если будет возможность. '
                'И, когда вы окажетесь в магическом мире, те, кто способен '
                'прочесть вашу ауру, определят вас, как потенциально мощного, '
                'но не тренированного мага. Когда вы учите какое-либо '
                'заклинание, вы учите его так, словно ваш IQ на самом деле '
                'равен IQ + уровень магических способностей. '
                'Пример: Ваше IQ 14, а магические способности 3. '
                'Вы учите заклинания, словно ваш IQ 17. В дополнение, мастер '
                'будет бросать проверку против вашего (IQ+способности), когда '
                'вы в первый раз видите магический предмет, и еще раз, когда '
                'вы дотрагиваетесь до него. Если бросок будет успешным, вы '
                'интуитивной поймете, что он обладает магией. '
                'Результат 3 или 4 еще и сообщит, полезна ли эта магия'
                ' или опасна, и насколько она сильна. Пример: Если ваше IQ 13 '
                'и у вас 3 уровня способностей, вы распознаете, что предмет '
                'магический при результате 16 или меньше. Если мастер сделал '
                'неудачный бросок, он просто ничего вам не скажет. '
                'Обратите внимание, что использование этого преимущества '
                'затрудняется для героя из немагического мира. '
                'У него по прежнему будет способность чувстсвовать магию, '
                'но, пока он не получит в этом определенного опыта, мастер '
                'скажет, например, не "этот идол магический", а "этот идол '
                'тебе кажется странным и очень зловещим. В нем есть чего-то '
                'необычное." Персонажи без магических способностей '
                'не обладают возможностью определить магическая это вещь, '
                'или нет. Цена: 15 очков за первый уровень способностей; '
                '10 за каждый следующий вплоть до максимума в 3 уровня.'
            ),
            cost=[15, 10, 10],
            level=level
        )

    @property
    def total_cost(self):
        return 15 + 10 * (self.level - 1)


class AcuteVision(Feature):

    def __init__(self, level: int):
        super().__init__(
            name='Обостренное зрение (Acute Vision)',
            description='Вы получаете бонус на любой бросок Зрения - то есть, '
                        'когда бросаете проверку, чтобы чего-нибудь '
                        'разглядеть, или когда мастер проверяет ваш IQ '
                        'с целью узнать, заметили ли вы чего-нибудь. '
                        'Цена: 2 очка за каждый +1 бонус.',
            cost=2,
            level=level
        )


class AcuteTasteAndSmell(Feature):

    def __init__(self, level: int):
        super().__init__(
            name='Обостренный вкус/обоняние (Acute Taste and Smell)',
            description='Вы получате бонус на проверку Вкуса или '
                        'Обоняния (стр. 92). К примеру, мастер может '
                        'производить проверку, чтобы определить, '
                        'почувствовали ли вы запах яда в своем напитке. '
                        'Цена: 2 очка за каждый +1 бонус.',
            cost=2,
            level=level
        )


class AcuteHearing(Feature):

    def __init__(self, level: int):
        super().__init__(
            name='Обостренный слух (Acute Hearing)',
            description='Вы получате бонус на проверку Слуха (стр. 92), '
                        'когда вы должны делать бросок, чтобы узнать, '
                        'услышали вы что-нибудь, или когда мастер делает '
                        'проверку вашего IQ, чтобы определить, '
                        'услышали ли вы какой-нибудь звук. '
                        'Цена: 2 очка за каждый +1 бонус.',
            cost=2,
            level=level
        )


class DangerSense(Feature):

    def __init__(self):
        super().__init__(
            name='Предчувствие опасности (Danger Sense)',
            description='Вы не можете всегда на это рассчитывать, но иногда '
                        'вы ощущаете, что что-то не так. Если у вас есть это '
                        'преимущество, то мастер секретно бросает проверку '
                        'вашего IQ во всех ситуациях, связанных с засадой, '
                        'надвигающейся бедой или чем-то в этом духе. Успешный '
                        'бросок означает, что вы почувствовали, что '
                        'происходит что-то не то. Бросок 3 или 4 позволяет '
                        'вам узнать немного деталей о природе опасности. '
                        'Примечание: В кампании, использующей псионику, это '
                        'может быть экстрасенсорной способностью! '
                        'См. Псионика, Глава 20.',
            cost=15,
        )


class Appearance(Feature):
    LEVEL_COSTS = {
        -3: -20,
        -2: -10,
        -1: -5,
        0: 0,
        1: 5,
        2: 15,
        3: 25,

    }
    LEVEL_NAMES = {
        -3: 'Отвратительная Внешность (Hideous Appearance)',
        -2: 'Уродливая внешность (Ugly Appearance)',
        -1: 'Непривлекательная внешность (Unattractive Appearance)',
        0: 'Нормальная внешность (Average Appearance)',
        1: 'Привлекательная внешность (Attractive Appearance)',
        2: 'Красивая [или Прекрасная] внешность '
           '(Handsome [or Beautiful] Appearance)',
        3: 'Очень Красивая [или Прекрасная] внешность '
           '(Very handsome [or Beautiful] Appearance)',
    }
    LEVEL_DESCRIPTIONS = {
        -3: 'Это любой тип отвратительной внешности по выбору игрока: '
            'горбатость, серьезные кожные заболевания, бельмо на глазу: '
            'а может, и то, и другое вместе. Изменение реакции -4 кроме '
            'случаев общения с совершенно чужими существами '
            '(которые ничего в этом не понимают) и людьми, '
            'которые не видят героя или героиню (которые, наконец заметив '
            'персонажа, будут очень удивлены, что может потребовать еще '
            'одного броска реакции по решению мастера). -20 очков.',
        -2: 'Тоже самое, но не настолько плохое: может быть, просто '
            'волокнистые волосы и свернутая челюсть. Реакция -2, '
            'кроме случаев, описанных выше. -10 очков.',
        -1: 'Ничего особенного, но герой просто выглядит непривлекательно. '
            'Реакция -1 у представителей его/ее расы, с другими расами '
            'минусов нет - проблема слишком незначительна, чтобы они это '
            'заметили. -5 очков.',
        0: 'Никаких бонусов или недостатков; вы можете легко слиться '
           'с толпой. Впечатление будет зависеть от поведения. '
           '"Средний" человек, улыбающийся и ведущий себя дружелюбно, '
           'покажется привлекательным, в отличие от хмурого и ворчащего. '
           'Стоимость нулевая.',
        1: 'Хоть герой и не участвует в конкурсах красоты, но '
           'определенно хорошо выглядит: реакция +1 при общении '
           'с представителями своей расы. 5 очков.',
        2: 'Персонаж мог бы участвовать в конкурсах красоты! '
           'Реакция +2 того же пола, +4 у противоположного, '
           'у вашей или схожей расы. 15 очков.',
        3: 'Герой участвует в конкурсах красоты, и побеждает в них! '
           'Реакция +2 того же пола, +6 (!) противоположного. '
           'Исключение: Если у представителей вашего пола уже есть '
           'причины недолюбливать вас (более 4 отрицательных очков '
           'на реакцию, независима от количества положительных), их будет '
           'возмущать ваша красота и вместо реакции +2 вы получите -2. '
           'Эта проблема появляется при соответствующем решении мастера. '
           'Дальнейшее усложнение: вас будут доставать талантливые '
           'скауты, дружелюбные пьяницы, работорговцы и другие надоеды '
           'в зависимости от того, где вы находитесь. 25 очков.',
    }

    def __init__(self, level: int):
        description = (
            'Вы сами определяете внешний вид своего персонажа так, как вы '
            'хотите. Вы можете случайным образом определить цвет волос, '
            'кожи и т.д., см. стр. 84. Тем не менее, исключительно красивый '
            '(или неприятный) внешний вид считается преимуществом '
            '(или недостатком). Хороший внешний вид стоит какого-то '
            'количества очков персонажа, плохой добавляет, чтобы можно было '
            'их потратить на что-нибудь еще.'
        )

        for key in sorted(self.LEVEL_DESCRIPTIONS.keys()):
            description += f'\n{self.LEVEL_DESCRIPTIONS[key]}'

        super().__init__(
            name='Внешность (Appearance)',
            description=description,
            cost=[-20, -10, -5, 0, 5, 15, 25],
            level=level
        )

    @property
    def total_cost(self):
        return self.LEVEL_COSTS[self.level]

    @property
    def level_name(self) -> str:
        return self.LEVEL_NAMES[self.level]

    @property
    def level_description(self) -> str:
        return self.LEVEL_DESCRIPTIONS[self.level]

    def __str__(self):
        return f'{self.level_name} [{self.total_cost}]'


class Cowardice(Feature):

    def __init__(self):
        super().__init__(
            name='Трусость (Cowardice)',
            description='Вы очень заботитесь о себе. Всегда, когда вам нужно '
                        'подвергнуться физической опасности, вы делаете '
                        'сделать проверку воли. Если это опасность смерти, '
                        'то он делается с -5. Если вы провалите его, то вы '
                        'отказываетесь подвергнуть себя опасности - если '
                        'только вам не угрожает большая опасность! Солдаты, '
                        'полиция и тому подобные существа будут реагировать '
                        'на вас с -2, если прознают, что вы трусливы.',
            cost=-10,
        )


class BadTemper(Feature):

    def __init__(self):
        super().__init__(
            name='Вспыльчивость (Bad Temper)',
            description='Вы не полностью контролируете свои эмоции. В любой '
                        'стрессовой ситуации, нужно провести бросок воли. '
                        'Если он провален, то вы теряете терпение и можете '
                        'оскорбить, ударить или любым другим способом '
                        'действовать против источника стресса.',
            cost=-10,
        )


class Unluckiness(Feature):

    def __init__(self):
        super().__init__(
            name='Неудачливый(Unluckiness)',
            description='Вам просто не везет. Все получается не так, как надо '
                        '- и обычно, в наиболее неудачный момент. Один раз за '
                        'сеанс игры мастер будет произвольно и злонамеренно '
                        'делать что-либо плохое для вас. Вы провалите важный '
                        'бросок кубиков, или (против всех шансов) враг '
                        'появится в самое неподходящее время. Если во время '
                        'приключения что-то плохое должно с кем-то случится, '
                        'то вы - первый кандидат. '
                        'Мастер не может просто убить неудачливого персонажа, '
                        'что угодно менее неприятное вполне подойдет.',
            cost=-10,
        )


class Greed(Feature):

    def __init__(self):
        super().__init__(
            name='Алчность (Greed)',
            description='Вы страстно желаете разбогатеть. Каждый раз, '
                        'когда предлагаются ценности - как плата за честную '
                        'работу, доход от похода, грабежа или сражения - вы '
                        'должны сделать проверку Воли, чтобы избежать '
                        'действия данного недостатка. Мастер может внести '
                        'изменения в бросок, если сумма, о которой идет речь, '
                        'много меньше вашего состояния. Малые деньги '
                        'не сильно искушают алчного персонажа, но бедный '
                        'герой должен делать бросок с -5 или даже больше, '
                        'если рядом маячит большой улов. Честные персонажи '
                        '(см. ниже) делают проверку с +5, чтобы не ввязаться '
                        'в сомнительное дело и +10 в явно криминальное. '
                        'Тем не менее, каждый жадный персонаж хоть раз '
                        'сделает чего-нибудь незаконное.',
            cost=-15,
        )


class Overconfidence(Feature):

    def __init__(self):
        super().__init__(
            name='Самоуверенность (Overconfidence)',
            description='Вы думаете, что вы умнее, сильнее и способнее, '
                        'чем вы есть на самом деле и действуете '
                        'соответствующим образом. Всегда (по мнению мастера), '
                        'когда вы слишком осторожничаете, вы должны сделать '
                        'проверку своего IQ. Проваленный бросок показывает, '
                        'что вы не можете действовать осторожно, а должны '
                        'действовать так, как если бы полностью '
                        'контролировали ситуацию. Самоуверенный персонаж '
                        'получает +2 на все броски реакции от младших или '
                        'наивных (они думают, что он так крут, как он '
                        'говорит), но -2 от опытных неигровых персонажей. '
                        'Этот недостаток напоминает манию величия '
                        '(Megalomania) (выше), но меньше по масштабам. '
                        'Робин Гуд был самоуверенным - он вызывал встречных '
                        'на дуэль на посохах. Гитлер обладал манией величия - '
                        'он сунулся в Россию. Герои чаще бывают '
                        'самоуверенными, чем обладающими манией величия. '
                        'Это требует отыгрывания. Скрытный персонаж может '
                        'быть гордым и хвастливым, или просто '
                        'нераздумывающим - но отыграйте это!',
            cost=-10,
        )


class Honesty(Feature):

    def __init__(self):
        super().__init__(
            name='Честность (Honesty)',
            description='Вы ОБЯЗАНЫ подчиняться закону, и прилагать все '
                        'усилия, чтобы другие также подчинялись ему. '
                        'Вы очень обязательны в этом смысле; это другая '
                        'разновидность Кодекса Чести (Code of Honor) '
                        '(см. выше). В области, '
                        'в которой мало или вообще нет законов, '
                        'вы не станете дикарем - а будете действовать так, '
                        'словно бы там действовали законы вашего дома. '
                        'Это недостаток, поскольку он часто ограничивает '
                        'вашу свободу! Столкнувшись с неблагоразумными '
                        'законами, вы должны сделать проверку IQ, чтобы '
                        'нарушить их и силы Воли, чтобы потом не сдаться '
                        'властям! Если вы будете действовать нечестно, мастер '
                        'может наказать вас за плохое отыгрывание персонажа. '
                        'Вы можете сражаться (или даже начать бой, если '
                        'делаете все в рамках закона). Вы даже можете убить '
                        'на дуэли или при самозащите - но никого не совершите '
                        'преднамеренного убийства. Если вы в безвыходном '
                        'положении, то можете украсть, но это крайняя мера и '
                        'потом вы постараетесь заплатить жертве. Если вас '
                        'посадили за преступление, которого вы не совершали, '
                        'вы не будете пытаться сбежать, при условии, что '
                        'с вами обращаются хорошо и вы уверены в исходе дела. '
                        'Вы всегда будете пытаться сдержать свое слово. '
                        '(Во время войны, вы можете действовать в отношении '
                        'противника "нечестно", но это не доставляет вам '
                        'радости!) Вы также считаете остальных честными, если '
                        'только не знаете обратного (сделайте проверку IQ, '
                        'чтобы понять, что кто-то нечестен, если у вас нет '
                        'доказательств). У честности, разумеется, есть и свои '
                        'плюсы. Если вы надолго останетесь в одном месте и о '
                        'вашей честности станет известно, мастер должен '
                        'добавить +1 на все небоевые проверки реакции и +3, '
                        'когда заходит разговор о доверии и честности. '
                        'Это весьма существенный бесплатный бонус на реакцию '
                        'за вашу репутацию. Вы можете солгать, если этим не '
                        'нарушаете закон. '
                        'Правдивость (Truthfulness) - отдельный недостаток.',
            cost=-10,
        )


class HardOfHearing(Feature):

    def __init__(self):
        super().__init__(
            name='Тугоухость (Hard of Hearing)',
            description='Вы не глухи, но страдаете от некоторой потери слуха. '
                        'Вы производите все проверки Слуха с -4 на IQ '
                        '(то бишь, проверка проводиться против IQ-4, '
                        'а не IQ). Когда делается проверка понимания '
                        'иностранного языка вы также делаете ее с -4 к IQ '
                        '(за исключением случая, когда говорите сами).',
            cost=-10,
        )


class BadSight(Feature):

    def __init__(self):
        super().__init__(
            name='Плохое зрение (Bad Sight)',
            description='Вы или близорукий, или дальнозоркий - '
                        'выбирайте сами. Если вы близорукий, то не можете '
                        'читать мелкие надписи с расстояния больше фута, '
                        'или дорожные знаки и т.д. на расстоянии больше '
                        '10 ярдов. При использовании оружия ближнего боя '
                        '-2 на проверки умения. При использовании оружия '
                        'дальнего боя, используйте значения, соответствующие '
                        'двойному расстоянию до цели. Если вы дальнозоркий, '
                        'вы не можете читать книги, кроме как с чрезвычайными '
                        'сложностями (требуется в 3 раза больше времени) и '
                        'получаете -3 к проверкам ловкости (DX) на любую '
                        'ручную работу, за которой нужно следить. '
                        'Любой персонаж при уровне развития 5 или больше '
                        'может добыть очки, которые полностью компенсируют '
                        'дефекты зрения пока он их носит; в 20 веке доступны '
                        'контактные линзы. Помните, что очки и линзы можно '
                        'разбить или потерять во время путешествия, а также '
                        'их могут отобрать враги! Для всех персонажей, '
                        'начинающих игру в веке, в котором Плохое зрение '
                        'может быть скорректировано, оно стоит лишь '
                        '-10 очков, если же этого сделать нельзя, то -25.',
            cost=-25,
        )


# class (Feature):
#
#     def __init__(self):
#         super().__init__(
#             name='',
#             description='',
#             cost=,
#             level=
#         )
